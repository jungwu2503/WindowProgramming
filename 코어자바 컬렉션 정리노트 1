객체지향 프로그래밍은 클래스 내에 데이터를 캡슐화함. 그러나 이것은 클래스 내부의 데이터를 조직화하는 방법에 대해 전통적인 프로그래밍 언어에서 보다 덜 중요하게 만듦
어떻게 클래스가 수천수백 아이템들 사잉서 쉽고 빠르게 탐색하게 할 것인가?
어떻게 요소들을 정렬된 순서로 만들고 이 순서 중간에 요소들을 빠르게 삽입하고 제거할 것인가?
실시간에 성장하는 임의 접근 기능을 갖는 배열 같은 데이터 구조가 필요한가?
클래스들 내부에 데이터를 구조화하는 방법은 일반 방식으로 메서드를 구현할 때뿐만 아니라 성능에서도 큰 차이가 있음.
복잡한 프로그래밍에서 필요한 정통적인 데이터 구조를 자바 기술에서 어떻게 지원하는 가?

컬렉션 인터페이스와 구현을 분리하기
자바 컬렉션 라이브러리가 인터페이스와 구현 부분을 분리한 것은 현대 데이터 구조 라이브러리에서 일반적인 방법.

자바 라이브러리에서 컬렉션과 반복자 인터페이스
컬렉션 클래스들을 위한 기본 인터페이스는 Collection 인터페이스. 두개의 기본 메소드를 가지고 있다
- boolean add(Object obj) : 객체를 컬렉션에 추가, add 메서드는 실제 객체를 추가하여 컬렉션을 변하게 했다면 true를, 변하지 않았다면  false를 반환.
                            한 객체를 set에 추가하려 할 때 이미 해당 객체가 존재하고 있다면 add요청은 거부됨(중복허용 x)
- Iterator iterator() : Iterator 인터페이스를 구현한 객체를 반환. 반복자 객체를 컨테이너 내의 요소들을 하나씩 방문하기위해 사용
Iterator 인터페이스의 3개의 기본 메서드
- Object next()
- boolean hasNext()
- void remove()
반복적으로 next()메서드를 호출하여 컬렉션 내의 요소들을 하나씩 차례로 방문가능. 컬렉션의 끝에 도달하면 next메서드는 NoSuchElementException을 투구함.
그러므로 next를 호출하기전 hasNext메서드를 호출할 필요가 있다. 반복자 객체가 여전히 방문할 요소들을 갖고 있다면 true를 호출.(hasNext가 true인 동안 next메서드 호출 유지
remove 메서드는 next 호출 후에 반환되는 요소 제거
