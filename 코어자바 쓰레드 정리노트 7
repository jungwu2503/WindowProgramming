벌크 연산
라이브러리의 벌크 연산 중의 하나를 사용하여 한번에 한 항목씩 컬렉션을 탐색하기 위해 반복자를 사용하는 것을 피할 수 있음.
두개 셋의 교집합을 찾을 때, 모든 컬렉션이 초기 값들을 유지하는 다른 컬렉션을 전달인자로 하는 생성자를 가지고 있는 사실을 사용.

리거시 API들과의 인터페이스
광범위한 자바 API는 컬렉션 프레임웍이 만들어지기 전에 설계되었기 때문에 종종 기존의 배열과 벡터와 최신의 컬렉션 사이의 변환을 필요로 함.
메서드 변형 - 원하는 타입의 길이가 0인 배열을 주면 반환된 배열은 같은 배열 타입으로 생성
Collection
Object[] toArray(Object[] array) : 배열 전달인자가 컬렉션 크기보다 큰지 검사. 만약 크다면 컬렉션의 모든 항목을 배열에 추가하고 null로 종료한 후 배열 반환.
                                  만약 array의 길이가 컬렉션 크기와 동일하다면 이 메서드는 컬렉션의 모든 항목들을 배열에 추가하고 null 종료를 추가하지 않음.
                                  만일 충분한 공간이 없다면 입력된 배열과 같은 타입의 새로운 공간을 생성하고 이를 컬렉션의 항목으로 채움.

알고리즘
일반적인 컬렉션 인터페이스는 많은 장점을 가짐. 만든 알고리즘을 바로 구현할 수 있음. 최대 항목을 찾을 때, 반복 루프는 작성하기 번거로움, 그리고 다소 많은 에러 발생.
반복 루프가 비어 있는 컨테이너들에 대해 올바르게 작동하는가? 오직 하나의 항목을 갖는 컨테이너에 대해서는? 우리는 매번 이 코드를 검사하고 디버깅하길 원치 않음.
이게 컬렉션 인터페이스가 필요한 경우. 알고리즘을 효율적으로 실행하기 위해 필요로 하는 컬렉션 인터페이스를 보면, get과 set을 갖는 임의 접근은 단순 반복보다 많은 단계를 필요로함.
연결 리스트의 최대 항목을 계산하는 것같은 임의 접근은 이 작업을 필요로 하지 않음. Collection 인터페이스를 구현하여 모든 객체를 받을 수 있는 max 메서드 구현.

이진 탐색
일반적으로 배열에서 객체를 찾기위해 맞는것을 발견할 때까지 모든 항목들을 방문할 필요가 있다. 배열이 정렬되어 있다면 중간에 있는 항목을 찾고 해당 항목이 찾으려는 항목보다 큰지 검사.
크다면 배열 중간의 앞에서 찾고 그렇지 않다면 중간에서 뒤에 있는 것을 찾는다. 이것은 문제를 반으로 줄임. 같은 방법을 계속해서 사용. Collection 클래스의 binarySearch는 이 알고리즘을
구현함. 컬렉션이 Comparable 인터페이스의 compareTo 항목으로 정렬되지 않았다면 비교자 객체 또한 제공할 필요 있음.
Collections
static int binarySearch(List elements, Object key)
static int binarySearch(List elements, Object key, Comparator c) : 만일 elements가 AbstractSequentialList 클래스를 extends했다면 이진 탐색을 사용하고 그렇지 않은 다른 경우에는
                                                                   이진 탐색을 사용하여 정렬된 리스트에서 key를 탐색한다. 메서드들은 리스트에서 키의 인덱스나 키가 리스트 내에
                                                                   존재하지 않는다면 음수값을 반환
                                                                   
단순한 알고리즘
Collection 클래스는 유용한 몇가지 알고리즘 포함. 한 리스트에서 다른 리스트로 항목 복사하기, 상수값으로 컨테이너 채우기, 리스트를 역순하기 등
왜 표준라이브러리에서 이런 단순한 알고리즘을 제공할까? 다른 누군가에 의해서 구현된 루프를 읽을 때 본래의 프로그래머가 갖고 있는 의도를 파악해야함.
Collections
static Object min(Collection elements) / static Object max(Collection elements) / static Object min(Collection elements, Comparator c) / 
static Object max(Collection elements, Comparator c) : 컬렉션에서 가장 작거나 큰 항목 반환
static void copy(List to, List from) : 소스 리스트에서 목표 기스트의 같은 위치로 모든 항목들 복사. 목표리스트는 적어도 소스 리스트만큼 길어야 함.
static void fill(List l, Object value) : 리스트의 모든 위치에 같은 값을 채움.
static void copty(List l) : 리스트 내의 항목들의 순서를 역순함. O(n) 시간 소요, n은 리스트의 길이
