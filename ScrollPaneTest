import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class MousePanel extends JPanel implements MouseMotionListener {
	
	private static final int MAX_XWIDTH = 1000;
	private static final int MAX_YHEIGHT = 800;
	private static final int SQUARELENGTH = 10;
	private static final int MAXNSQUARES = 100;
	private Point[] squares = new Point[MAXNSQUARES];
	private int nsquares = 0;
	private int current = -1;
	
	public MousePanel() {
		addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent evt) {
				int x = evt.getX();
				int y = evt.getY();
				current = find(x,y);
				if (current < 0) // not inside a square
					add(x,y);
			}
			
			public void mouseClicked(MouseEvent evt) {
				int x = evt.getX();
				int y = evt.getY();
				
				if (evt.getClickCount() >= 2)
					remove(current);
			}
		});
		
		addMouseMotionListener(this);
		
		setPreferredSize(new Dimension(MAX_XWIDTH, MAX_YHEIGHT));
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		for (int i = 0; i < nsquares; i++) {
			draw(g, i);
		}
	}
	
	public int find(int x, int y) {
		for (int i = 0; i < nsquares; i++) 
			if (squares[i].x - SQUARELENGTH / 2 <= x &&
					x <= squares[i].x + SQUARELENGTH / 2 &&
					squares[i].y - SQUARELENGTH / 2 <= y &&
					y <= squares[i].y + SQUARELENGTH / 2)
				return i;
		return -1;
	}
	
	public void draw(Graphics g, int i) {
		g.drawRect(squares[i].x - SQUARELENGTH / 2, squares[i].y - SQUARELENGTH / 2, SQUARELENGTH, SQUARELENGTH);
	}
	
	public void add(int x, int y) {
		if (nsquares < MAXNSQUARES) {
			squares[nsquares] = new Point(x, y);
			current = nsquares;
			nsquares++;
			repaint();
		}
	}
	
	public void remove(int n) {
		if (n < 0 || n >= nsquares) return;
		nsquares--;
		squares[n] = squares[nsquares];
		if (current == n) current = -1;
		repaint();
	}
	
	public void mouseMoved(MouseEvent evt) {
		int x = evt.getX();
		int y = evt.getY();
		
		if (find(x,y) >= 0)
			setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
		else
			setCursor(Cursor.getDefaultCursor());
	}
	
	public void mouseDragged(MouseEvent evt) {
		int x = evt.getX();
		int y = evt.getY();
		
		if (current >= 0) {
			Graphics g = getGraphics();
			g.setXORMode(getBackground());
			draw(g, current);
			squares[current].x = x;
			squares[current].y = y;
			draw(g, current);
			g.dispose();
		}
		
	}
	
}

class ScrollPaneFrame extends JFrame implements ActionListener {
	
	JScrollPane sp;
	
	public ScrollPaneFrame() {
		setTitle("ScrollPaneTest");
		setSize(400, 300);
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});
		
		Container contentPane = getContentPane();
		Component viewedComponent = new MousePanel();
		
		sp = new JScrollPane(viewedComponent);
		
		RulerPanel horizRulerPanel = new RulerPanel(
				SwingConstants.HORIZONTAL, viewedComponent.getPreferredSize().width,
				25, 100, 1000, 10);
		sp.setColumnHeaderView(horizRulerPanel);
		
		RulerPanel vertRulerPanel = new RulerPanel(
				SwingConstants.VERTICAL, 25, viewedComponent.getPreferredSize().height,
				100, 100, 20);
		sp.setRowHeaderView(vertRulerPanel);
	
		contentPane.add(sp, "Center");
		
		sp.registerKeyboardAction(this, KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN, 0, false),
				JComponent.WHEN_IN_FOCUSED_WINDOW);
		
	}
	
	public void actionPerformed(ActionEvent evt) {
		JScrollBar vBar = sp.getVerticalScrollBar();
		int x = vBar.getValue();
		vBar.setValue(x + 100);
	}
	
}

public class ScrollPaneTest {

	public static void main(String[] args) {
		JFrame frame = new ScrollPaneFrame();
		frame.show();
	}

}

class ScrollAction extends AbstractAction {
	
	private JScrollPane scrollPane;
	private int orientation;
	private int type;
	private int direction;
	
	public static final int UNIT = 1;
	public static final int BLOCK = 2;
	
	public ScrollAction(JScrollPane p, int orient, int t, int dir) {
		scrollPane = p;
		orientation = orient;
		type = t;
		direction = dir;
	}
	
	public static void register(JScrollPane p, int orient, int t, int dir, int key, int modifier) {
		p.registerKeyboardAction(new ScrollAction(p,orient,t,dir), KeyStroke.getKeyStroke(key, modifier, false), JComponent.WHEN_IN_FOCUSED_WINDOW);
	}

	public void actionPerformed(ActionEvent evt) {
		JScrollBar scrollBar;
		if (orientation == JScrollBar.HORIZONTAL) 
			scrollBar = scrollPane.getHorizontalScrollBar();
		else
			scrollBar = scrollPane.getVerticalScrollBar();
		if (scrollBar == null || !scrollBar.isVisible()) 
			return;
		int increment;
		if (type == UNIT)
			increment = scrollBar.getUnitIncrement();
		else 
			increment = scrollBar.getBlockIncrement();
		scrollBar.setValue(scrollBar.getValue() + increment * direction);
	}
	
}

class RulerPanel extends JPanel implements SwingConstants {
	
	private int direction;
	private int labelDistance;
	private int subdivisions;
	private int label;
	
	public RulerPanel(int dir, int w, int h, int lbldist, int lbl, int subs) {
		direction = dir;
		labelDistance = lbldist;
		label = lbl;
		subdivisions = subs;
		setPreferredSize(new Dimension(w,h));
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		Dimension d = getPreferredSize();
		if (direction == HORIZONTAL) {
			int i = 0;
			int x = 0;
			
			if (subdivisions > 0) {
				while (x < d.width) {
					g.drawLine(x, 0, x, (d.height*4)/10);
					i++;
					x = (i * labelDistance) / subdivisions;
				}		
			}
			i = 0;
			x = 0;
			while (x <= d.width) {
				g.drawLine(x, 0, x, (d.height*8)/10);
				g.drawString("" + i * label, x+2, (d.height*8)/10);
				i++;
				x = i * labelDistance;
			}
		} else {
			int i = 0;
			int y = 0;
			if (subdivisions > 0) {
				while (y <= d.height) {
					g.drawLine(0, y, (d.width*4)/10, y);
					i++;
					y = (i * labelDistance) / subdivisions;
				}		
			}
			i = 0;
			y = 0;
			while (y <= d.height) {
				g.drawLine(0, y, (d.width*8)/10, y);
				g.drawString("" + i * label, 2, y);
				i++;
				y = i * labelDistance;
			}
		}
	}
	
}
