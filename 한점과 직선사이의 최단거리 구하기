import java.awt.*;
import java.util.*;

import javax.swing.*;

class DrawerPanel extends JPanel {
	static int SX = 50;
	static int SY = 50;
	static int WIDTH = 500;
	static int HEIGHT = 500;
	static int OX = SX + WIDTH / 10;
	static int OY = SY + HEIGHT;
	static int XWIDTH = WIDTH + WIDTH / 10;
	static int YHEIGHT = HEIGHT + HEIGHT / 10;
	static int MARKINGSIZE = 5;
	static int MAXDOMAIN = 10;
	static int MAXRANGE = 10;
	
	static Random rand = new Random();
	
	Point p1 = new Point();
	Point p2 = new Point();
	Point from = new Point();
	
	double t;
	double delta;
	double distance = 0.0;
	double minDistance = 10e10;
	double minX = 10e10;
	double minY = 10e10;
	boolean lastDraw = false;
	
	DrawerPanel() {
		p1.x = rand.nextInt(MAXDOMAIN);
		p1.y = rand.nextInt(MAXRANGE);
		
		p2.x = rand.nextInt(MAXDOMAIN);
		p2.y = rand.nextInt(MAXRANGE);
		
		from.x = rand.nextInt(MAXDOMAIN);
		from.y = rand.nextInt(MAXRANGE);
		
		t = 0.0;
		delta = 0.01;
		
		Thread thread = new Thread() {
			public void run() {
				while(t <= 1.0) {
					try {
						Thread.sleep(100);
					} catch (InterruptedException ex) {
					}
					t = t + delta;
					repaint();
				}
				lastDraw = true;
				repaint();
			}
		};
		thread.start();
	}
	
	void drawAxes(Graphics g) {
		g.drawLine(SX, SY+HEIGHT, SX+XWIDTH, SY+HEIGHT);
		g.drawLine(OX, SY, OX, SY+YHEIGHT);
		
		int i;
		int interval = WIDTH/10;
		g.drawLine(OX-interval, OY, OX-interval, OY-MARKINGSIZE);
		g.drawLine(OX, OY+interval, OX+MARKINGSIZE, OY+interval);
		for (i = 1; i <= 10; i++) {
			g.drawLine(OX+i*interval, OY, OX+i*interval, OY-MARKINGSIZE);
			g.drawLine(OX, OY-i*interval, OX+MARKINGSIZE, OY-i*interval);
		}
		
		String maxDomain = "" + MAXDOMAIN;
		g.drawString(maxDomain, SX+XWIDTH, SY+HEIGHT-10);
		String maxRange = "" + MAXRANGE;
		g.drawString(maxRange, OX+10, SY);
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		drawAxes(g);
		
		double maxDomain = (double)MAXDOMAIN;
		double maxRange = (double)MAXRANGE;
		
		int xPrime1 = OX + (int)(p1.x*WIDTH/maxDomain);
		int yPrime1 = (int)(-(p1.y*HEIGHT/(maxRange)) + OY);
		g.drawOval(xPrime1-2, yPrime1-2, 4, 4);
		String pos = "" + "(" + p1.x + "," + p1.y + ")";
		g.drawString(pos, xPrime1+2, yPrime1+13);
		
		int xPrime2 = OX + (int) (p2.x*WIDTH/maxDomain);
		int yPrime2 = (int)(-(p2.y*HEIGHT/(maxRange)) + OY);
		g.drawOval(xPrime2-2, yPrime2-2, 4, 4);
		pos = "" + "(" + p2.x + "," + p2.y + ")";
		g.drawString(pos, xPrime2+2, yPrime2+13);
		
		int xPrimeFrom = OX + (int) (from.x*WIDTH/maxDomain);
		int yPrimeFrom = (int)(-(from.y*HEIGHT/(maxRange)) + OY);
		g.setColor(Color.red);
		g.drawOval(xPrimeFrom-2, yPrimeFrom-2, 4, 4);
		pos = "" + "(" + from.x + "," + from.y + ")";
		g.drawString(pos, xPrimeFrom+2, yPrimeFrom+13);
		
		g.setColor(Color.blue);
		g.drawLine(xPrime1, yPrime1, xPrime2, yPrime2);
		
		g.setColor(Color.green);
		
		double x = (1.0-t)*p1.x + t*p2.x;
		double y = (1.0-t)*p1.y + t*p2.y;
		int xPrime = OX + (int)(x*WIDTH/maxDomain);
		int yPrime = (int)(-(y*HEIGHT/(maxRange))+OY); //---
		
		g.drawLine(xPrimeFrom, yPrimeFrom, xPrime, yPrime);
		
		distance = Math.sqrt((x-from.x)*(x-from.x) + (y-from.y)*(y-from.y));
		if (minDistance > distance) {
			minDistance = distance;
			minX = x;
			minY = y;
		}
		
		if (lastDraw) {
			g.setColor(Color.red);
			xPrime = OX + (int)(minX*WIDTH/maxDomain);
			yPrime = (int)(-(minY*HEIGHT/maxRange)+OY);
			g.drawLine(xPrimeFrom, yPrimeFrom, xPrime, yPrime);
			g.setColor(Color.black);
		}
		
	}
	
}

class GraphDrawerFrame extends JFrame {
	GraphDrawerFrame() {
		setTitle("Distance from a point to a line segment");
		setSize(700,700);
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		Container contentPane = getContentPane();
		contentPane.add(new DrawerPanel());
	}
}

public class FindDistanceFromPointToLine {

	public static void main(String[] args) {
		JFrame frame = new GraphDrawerFrame();
		frame.setVisible(true);
	}

}
