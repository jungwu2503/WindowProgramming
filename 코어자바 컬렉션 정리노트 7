알고리즘 작성
알고리즘 또는 전달인자로서 컬렉션을 갖는 모든 메서드를 작성할 때 가능하다면 구체적인 구현이 아닌 인터페이스로 작업을 해야함.

만일 메서드 전달인자로서 컬렉션 인터페이스를 사용하는 것 같은 좋은 아이디어가 있다면 왜 자바 라이브러리가 보다 자주 이 규칙을 따르지 않는 것인가?
이유는 타이밍이다. 스윙 라이브러리는 컬렉션 라이브러리 전에 만들어 졌음. 보다 크게 컬렉션 라이브러리에 의존하는 향후의 API를 기대하게 될 것.
특히 벡터는 동기화 오버헤드 때문에 기존의 방식을 버리게 될 것.

만일 컬렉션을 반환하는 메서드를 작성한다면 컬렉션 인터페이스에 대한 반환 타입을 변경할 수 없음. 메서드 사용자는 사실 가능하면 가장 구체적인 클래스를 받길 선호함.
그러나 의지에 따라 클래스 대신에 인터페이스를 반환하길 원할 수 있음.

리거시 컬렉션
hashtable 클래스
전통적인 hashtable 클래스는 HashMap과 같은 용도를 제공하며 같은 인터페이스를 가짐. Vector 클래스의 메서드처럼 Hashtable 메서드들은 동기화 되있음. 
만일 동기화나 리거시 코드와의 호환을 필요로 하지 않다면 HashMap을 대신 사용

열거(Enumeration)
리거시 컬렉션은 연속적인 항목들을 탐색하기 위해 Enumeration 인터페이스를 사용함. Enumeration 인터페이스는 hasMoreElements와 nextElement 두개의 메서드를 가짐.
Iterator 인터페이스와 유사.

프로퍼티 셋
특별한 타입의 맵 구조. 세가지 특징을 가짐
- 키 및 값은 문자열이다
- 테이블을 파일에 저장되거나 파일로부터 로드될 수 있다
- 기본적인 보조 테이블이 있다
프로퍼티 셋은 프로그램의 구성 옵션을 지정하는데 유용함. Unix나 DOS의 환경 변수가 그 좋은 예임. 

기본 프로퍼티
프로퍼티 셋은 응용 프로그램을 커스텀화 하는데 유용하게 쓰임. Properties 클래스는 기본값을 제공하는 두가지 메커니즘을 가짐.
첫 번쨰는, 문자열의 값을 찾을 때마다, 키가 존재하지 않을 때는 자동적으로 사용될 기본값을 지정할 수 있음.
String font = settings.getProperty("FONT", "Courier");
만일 프로퍼티 테이블에 "FONT" 프로퍼티가 있으면, font는 그 문자열로 설정됨. 없으면, Courier로 설정.
모든 getProperty마다 기본값을 지정하기가 너무 성가시면, 모든 기본값들을 보조 프로퍼티 셋에 미리 넣어두고 이를 찾기 테이블(lookup table)의 생성자에 제공하면 됨.
만약 defaultSettings 생성자에 다른 프로퍼티 셋 전달인자를 주면, 심지어는 기본값에 대한 기본값도 지정할수 있음.
