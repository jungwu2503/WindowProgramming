import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.rmi.*;
import java.rmi.server.*;

class ServerImpl implements Server 
{
	MainPanel wnd;
	public ServerImpl(MainPanel wnd) throws RemoteException {
		this.wnd = wnd;
	}

	public String report(String ip, int salesData) throws RemoteException {
		wnd.writeText("[" + ip + "]" + "reported his selling today.");
		wnd.writeText("[" + ip + "]" + salesData + "Won.");
		return "Thank you";
	}
	public int query(String ip) throws RemoteException {
		wnd.writeText("[" + ip + "]" + "asked his total selling.");
		return 10;
	}
}

class ButtonPanel extends JPanel
{
	MainPanel serverWnd;
	JButton startButton;
	JButton stopButton;
	JButton salesRecordButton;
	ButtonPanel(MainPanel serverWnd) {
		this.serverWnd = serverWnd;

		startButton = new JButton("Start");
		stopButton = new JButton("Stop");
		salesRecordButton = new JButton("Sales Record");

		add(startButton);
		add(stopButton);
		add(salesRecordButton);

		startButton.addActionListener(serverWnd);
		stopButton.addActionListener(serverWnd);
		salesRecordButton.addActionListener(serverWnd);
	}
}
class InputListener extends KeyAdapter
{
	MainPanel serverWnd;
	JTextField textInput;
	InputListener(JTextField textInput,MainPanel serverWnd) {
		this.serverWnd = serverWnd;
		this.textInput = textInput;
	}
	public void keyPressed(KeyEvent ev) {
		int keyCode = ev.getKeyCode();
		if (keyCode == KeyEvent.VK_ENTER)
		{
			String msg = textInput.getText().trim();
			serverWnd.writeText("[I say ] " + msg);
			String clientIP = serverWnd.getSelectedIP();
			//serverWnd.sendLine(clientIP,msg);
			textInput.setText("");
		}
	}
}
class InputPanel extends JPanel
{
	MainPanel serverWnd;
	JComboBox<String> ips;
	JTextField textInput;
	InputPanel(MainPanel serverWnd) {
		this.serverWnd = serverWnd;
		setLayout(new GridLayout(2,1));

		ips = new JComboBox<String>();
		textInput = new JTextField();
		textInput.addKeyListener(new InputListener(textInput,serverWnd));

		add(ips);
		add(textInput);
	}
	public void addComboBoxItem(String ip) {
		int n;
		
		ips.removeItem(ip);
		ips.insertItemAt(ip,0);
		ips.setSelectedIndex(0);
	}
	String getSelectedIP() {
		return ips.getItemAt(ips.getSelectedIndex());
	}
}
class MainPanel extends JPanel implements ActionListener
{
	ButtonPanel buttonPanel;
	JTextArea textBox;
	JScrollPane textPane;
	InputPanel inputPanel;
	String myIP;
	ServerImpl server;

	MainPanel() {
		buttonPanel = new ButtonPanel(this);
		setLayout(new BorderLayout());

		textBox = new JTextArea();
		textPane = new JScrollPane(textBox);
		textBox.setBorder(BorderFactory.createLoweredBevelBorder());
		inputPanel = new InputPanel(this);

		add(buttonPanel,BorderLayout.NORTH);
		add(textPane,BorderLayout.CENTER);
		add(inputPanel,BorderLayout.SOUTH);
		writeText("Please press start button");

		try
		{
			InetAddress address = InetAddress.getLocalHost();
			myIP = address.getHostAddress();
		}
		catch (Exception ex)
		{
		}
	}
	String getSelectedIP() {
		return inputPanel.getSelectedIP();
	}
	public void addComboBoxItem(String ip) {
		inputPanel.addComboBoxItem(ip);
	}
	public void writeText(String msg) {
		textBox.append(msg + "\r\n");
	}
	public void actionPerformed(ActionEvent ev) {
		String command = ev.getActionCommand();
		if (command.equals("Start"))
		{
			try
			{
				server = new ServerImpl(this);
				Naming.rebind("RemoteServer", server);
				writeText("Server started...");
				writeText(myIP + " as name: RemoteServer");
			}
			catch (Exception ex)
			{
			}
			
		} else if (command.equals("Stop"))
		{			
		}
	}
}
class ServerFrame extends JFrame
{
	ServerFrame() {
		super("Server");
		setSize(400,600);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		Container contentPane = getContentPane();
		contentPane.add(new MainPanel());
	}
}
class TestServer 
{
	public static void main(String[] args) 
	{
		ServerFrame serverFrame = new ServerFrame();
		serverFrame.setVisible(true);
	}
}
